import React from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { CheckCircle, XCircle, Lightbulb, Target } from 'lucide-react';

interface PersonalizedSuggestion {
  skillsToAdd: string[];
  skillsToRemove: string[];
  recommendations: string[];
  overallScore: number;
  strengthAreas: string[];
  improvementAreas: string[];
}

interface SuggestionsModalProps {
  isOpen: boolean;
  onClose: () => void;
  suggestions: PersonalizedSuggestion | null;
  resumeFilename?: string;
  jobTitle?: string;
}

const SuggestionsModal: React.FC<SuggestionsModalProps> = ({
  isOpen,
  onClose,
  suggestions,
  resumeFilename,
  jobTitle
}) => {
  if (!suggestions) return null;

  const downloadReport = () => {
    const reportContent = `
RESUME IMPROVEMENT REPORT
========================

Resume: ${resumeFilename || 'Your Resume'}
Position: ${jobTitle || 'Target Position'}
Overall Match Score: ${suggestions.overallScore}%
Generated on: ${new Date().toLocaleDateString()}

SKILLS TO ADD (${suggestions.skillsToAdd.length}):
${suggestions.skillsToAdd.map(skill => `• ${skill}`).join('\n')}

${suggestions.skillsToRemove.length > 0 ? `SKILLS TO DE-EMPHASIZE (${suggestions.skillsToRemove.length}):
${suggestions.skillsToRemove.map(skill => `• ${skill}`).join('\n')}

` : ''}${suggestions.strengthAreas.length > 0 ? `YOUR STRENGTHS:
${suggestions.strengthAreas.map(area => `• ${area}`).join('\n')}

` : ''}${suggestions.improvementAreas.length > 0 ? `IMPROVEMENT AREAS:
${suggestions.improvementAreas.map(area => `• ${area}`).join('\n')}

` : ''}ACTIONABLE RECOMMENDATIONS:
${suggestions.recommendations.map((rec, idx) => `${idx + 1}. ${rec}`).join('\n')}

---
Report generated by ResuMatch - AI-Powered Resume Analysis
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Resume_Analysis_Report_${resumeFilename?.replace(/[^a-zA-Z0-9]/g, '_') || 'Report'}_${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Target className="w-5 h-5 text-blue-600" />
            <span>Personalized Resume Suggestions</span>
          </DialogTitle>
          <DialogDescription>
            {resumeFilename && jobTitle && (
              <>Recommendations for <strong>{resumeFilename}</strong> applied to <strong>{jobTitle}</strong></>
            )}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Overall Score */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <h3 className="font-medium text-gray-900">Overall Match Score</h3>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                suggestions.overallScore >= 80 ? 'text-green-600 bg-green-100' :
                suggestions.overallScore >= 60 ? 'text-yellow-600 bg-yellow-100' :
                'text-red-600 bg-red-100'
              }`}>
                {suggestions.overallScore}%
              </div>
            </div>
          </div>

          {/* Skills to Add */}
          {suggestions.skillsToAdd.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <h3 className="font-medium text-gray-900">Skills to Add</h3>
              </div>
              <p className="text-sm text-gray-600 mb-3">
                Adding these skills to your resume could significantly improve your match score:
              </p>
              <div className="flex flex-wrap gap-2">
                {suggestions.skillsToAdd.map((skill, index) => (
                  <Badge key={index} variant="secondary" className="bg-green-100 text-green-800">
                    + {skill}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Skills to Remove/De-emphasize */}
          {suggestions.skillsToRemove.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <XCircle className="w-5 h-5 text-red-600" />
                <h3 className="font-medium text-gray-900">Skills to De-emphasize</h3>
              </div>
              <p className="text-sm text-gray-600 mb-3">
                These skills may not be as relevant for this position:
              </p>
              <div className="flex flex-wrap gap-2">
                {suggestions.skillsToRemove.map((skill, index) => (
                  <Badge key={index} variant="outline" className="text-red-600 border-red-200">
                    - {skill}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Strength Areas */}
          {suggestions.strengthAreas && suggestions.strengthAreas.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <CheckCircle className="w-5 h-5 text-blue-600" />
                <h3 className="font-medium text-gray-900">Your Strengths</h3>
              </div>
              <div className="flex flex-wrap gap-2">
                {suggestions.strengthAreas.map((area, index) => (
                  <Badge key={index} className="bg-blue-100 text-blue-800">
                    {area}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Improvement Areas */}
          {suggestions.improvementAreas && suggestions.improvementAreas.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Target className="w-5 h-5 text-orange-600" />
                <h3 className="font-medium text-gray-900">Areas for Improvement</h3>
              </div>
              <div className="flex flex-wrap gap-2">
                {suggestions.improvementAreas.map((area, index) => (
                  <Badge key={index} variant="outline" className="text-orange-600 border-orange-200">
                    {area}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Detailed Recommendations */}
          {suggestions.recommendations.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Lightbulb className="w-5 h-5 text-yellow-600" />
                <h3 className="font-medium text-gray-900">Actionable Recommendations</h3>
              </div>
              <div className="space-y-3">
                {suggestions.recommendations.map((recommendation, index) => (
                  <div key={index} className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                    <p className="text-sm text-gray-700">{recommendation}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
            <Button className="bg-blue-600 hover:bg-blue-700" onClick={downloadReport}>
              Download Report
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionsModal;
